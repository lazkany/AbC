{"name":"AbC","tagline":"The Implementation of AbC Linguistic Primitives ","body":"### Attribute-based Communication.\r\nAbC is a process calculus for attribute-based communication. An AbC system consists of a set of parallel agents each of which is equipped with a set of attributes. Communication takes place in an implicit multicast fashion, and interactions among agents are dynamically established by taking into account \"connections\" as determined by predicates over the attributes of agents.\r\n\r\nIn this page, we present a prototype implementation for AbC linguistic primitives and show how one can exploit these flexible primitives to model different communication models and interaction patterns. \r\n\r\n### Getting Started\r\nIn this implementation we consider a message broker. In essence, it accepts messages from sending components, and delivers them to all registered components except for the sending one. This message broker has the exact role of a forwarder and it does not contribute anything to message filtering. Deciding to accept a message or not is carried out when the message is delivered to the component. This implies that you always have to start the forwarding server/message broker so that your program functions in the expected way. This task is very easy, all you need to do is to create an instance of the class \"ServerPort\". This class is responsible for forwarding messages. By default, It accepts messages at port number 9998 and it accepts registration at port number 9999. In the code snippet below we show how to instantiate this class and the required classes to be imported.   \r\n\r\n<pre><code>\r\nimport java.io.IOException;\r\nimport org.sysma.abc.core.centralized.ServerPort;\r\nimport org.sysma.abc.core.exceptions.DuplicateNameException;\r\npublic class MainServer {\r\n\tpublic static void main(String[] args) throws IOException, DuplicateNameException {\r\n\t\tServerPort srvr=new ServerPort();\t\t\r\n\t}\r\n}\r\n</code></pre>\r\n\r\nIn this way, every AbC component should communicate only with the message broker/main server, this server is responsible for forwarding the messages to the other components. This means that every component should provide a mean of communication and in our implementation this can be done by instantiating the class \"ServerPortClient\" and specify the local address and the server address. Every node should also register itself to the message broker to be considered for future incoming messages. All addresses are socket addresses (i.e., IP address + port number). As mentioned above, the message broker with default settings accepts messages at port 9998 and registration at port 9999. In our tutorial here, we let the user to enter the port address at run time and because we run the examples on one machine, we consider the IP address as a wildcard as shown below.\r\n\r\n<pre><code>\r\n    System.out.println(\"Enter port number : \");\r\n\tint port = 0;\r\n\ttry {\r\n\t\tBufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tport = Integer.parseInt(bufferRead.readLine());\r\n\r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\tServerPortClient cPortClient = new ServerPortClient(new ServerPortAddress(9998), new ServerSocket(port));\r\n\tcPortClient.RemoteRegister(new ServerPortAddress(9999));\r\n</code></pre>\r\n\r\nNow everything is in place to start programming with AbC linguistic primitives as we will see in the following examples. Now we list the basic steps to write an AbC program:\r\n\r\n* Create a Java class with a main method.\r\n* Create a Java class for each process type in your model (This class should extend the AbCProcess class and override the doRun() method). The doRun() method should contain the behaviour of your process.\r\n* In the main method, instantiate your processes, instantiate the classes AbCEnvironment, Attribute, and AbCComponent, assign attributes to the environment, the environment to the component, and processes to the component. Notice that the method addProcess() puts processes in parallel. For instant, if you have component C1, and then you add processes P1 and P2 to component C1, this is equivalent of having P1 and P2 in parallel within component C1.\r\n* Add a client port to your component (C1.addPort(cPortClient)).\r\n* Start the execution of your component with Start() method.\r\n* This is it!\r\n\r\n### Attribute-based Interaction\r\nNow we show the basic idea of attribute-based communication through a swarm robot scenario. We have four kinds of robots: Explorer, Helper, Rescuer, and Charger. The explorer robot is searching for victims in a disaster arena; the helper robot is helping other rescuers to rescue a victim; the rescuer robot already found the victim and waits until sufficient number of robots arrives to start rescuing; The charger robot is waiting for requests for charging from explorers. They all exchange information through the message broker as shown below.\r\n\r\n  ![](https://dl.dropboxusercontent.com/s/e1w8f2qxge2m3rt/attribute.png?dl=0) \r\n\r\nThe behaviour of the explorer robot is simple, it sends queries for information about victims to nearby rescuers or helpers. It sends its Id, a qry request, and its role. In our implementation values are sent as a sequence of strings separated with comma \",\". The predicate should be as follows: \r\n\r\n`GroupPredicate orPrd = new Or(new HasValue(\"role\", \"rescuer\"), new HasValue(\"role\", \"helper\"));`\r\n\r\nWe provide a set of predicates to be used to filter messages and you can find them here [AbC Predicates](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/grpPredicate). If we take the predicate HasValue(\"role\", \"rescuer\") for example,this corresponds to the AbC predicate (role=rescuer) where the left hand side denotes an attribute identifier and the right hand side corresponds to a value. The behaviour of the explorer robot is shown bellow.\r\n\r\n<pre><code>\r\npublic class Explorer {\r\n\tpublic static GroupPredicate orPrd = new Or(new HasValue(\"role\", \"rescuer\"), new HasValue(\"role\", \"helper\"));\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\t// TODO Auto-generated method stub\r\n\t\t\tSend(orPrd, this.getComponent().getStore().getValue(\"id\")+\",\"+\"qry\" + \",\"+ this.getComponent().getStore().getValue(\"role\"), null);\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nThe Send method takes three parameters (predicate,values,update), the filter predicate, the sequence of values as a string, and a possible set of local attribute updates. In this case we don't need the updates. Below you see the the definitions in the main method. \r\n\r\n<pre><code>\r\n    ServerPortClient cPortClient = new ServerPortClient(new ServerPortAddress(9998), new ServerSocket(port));\r\n    cPortClient.RemoteRegister(new ServerPortAddress(9999));\r\n\tProcess_1 explorer = new Process_1(\"explorer_1\");\r\n\tAbCEnvironment store1 = new AbCEnvironment();\r\n\tAttribute<Object> a1 = new Attribute<Object>(\"role\", Object.class);\r\n\tAttribute<Object> a2 = new Attribute<Object>(\"id\", Object.class);\r\n\tstore1.setValue(a1, \"explorer\");\r\n\tstore1.setValue(a2, \"1\");\r\n\tAbCComponent c1 = new AbCComponent(\"C1\", store1);\r\n\tc1.addProcess(explorer);\r\n\tc1.addPort(cPortClient);\r\n\tcPortClient.start();\r\n\tc1.start();\r\n</code></pre>\r\n\r\n\r\nAs we mentioned in the previous section, here we define the component, its environment, and its attributes. we attach the process we defined to the component and start its execution. \r\n\r\nThe behaviour of processes (i.e., Helper, Rescuer, and Charger) is specified in the same way. The only differences are those regarding their attributes, attribute values and their predicate. They also use the other construct for communication which is the receive method. The receive method takes two parameters (predicate, update), the receiving predicate and a possible set of local attribute updates if there is any. It should be noted that the receiving predicate can either check local attributes or if the received values satisfy certain conditions. As we know, the receiving values are a sequence of strings concatenated with \",\". If you want to refer to a specific element in the received value, use the following notation for the left hand side of the predicate operand \"$index\". If you put a dollar sign before an integer number, this will be regarded as a bound name that refers to the value with index \"index\" in the received sequence of values. For instance if we take the receiving predicate for the Helper robot, it should be as follows: \r\n\r\n`GroupPredicate andPrd = new And(new HasValue(\"$1\", \"qry\"), new HasValue(\"$2\", \"explorer\"));`\r\n\r\nThis is an (and) predicate that checks if the second element of the received values equals to \"qry\" and the third element equals to \"explorer\". It corresponds to the AbC predicate (x=qry) && (y=explorer) where the received sequence of values is (v,x,y). Notice that the index starts from zero. Below we only show the behaviour of the Helper robot. Processes Rescuer and charger follow in a similar way. The source code for the whole example can be found be the end of this section and we also include a video to show how to run AbC programs.\r\n\r\n<pre><code>\r\npublic class Helper {\r\n\tpublic static GroupPredicate andPrd = new And(new HasValue(\"$1\", \"qry\"), new HasValue(\"$2\", \"explorer\"));\r\n\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\r\n\t\t\tSystem.out.println(this.name + \" => received: \" + receive(andPrd, null));\r\n\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nPutting it all together \r\n\r\n* To run your AbC program, you'll need AbC .JAR and its dependencies (i.e.,[gson-2.5.jar](http://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.5%7Cjar)) placed in the same folder. \r\n\r\n* To create AbC .JAR, after you complete writing your AbC program, select the main directory in the project explorer in your eclipse (org.sysma.abc.core). From file menu, select \"Export\". the Select JAR File from JAVA folder and finally save it in the same folder of \"gson-2.5.jar\".\r\n\r\n* Assume that you saved the AbC .JAR with \"test.jar\" name, so in the terminal you write the following to run for instance the code of the Helper robot. The AbC .JAR file for the examples in this tutorial can be found in [test.jar](https://www.dropbox.com/s/w1nqfasckxi1x4j/test.jar?dl=0)\r\n\r\n`java -cp test.jar:gson-2.5.jar org.sysma.abc.core.Examples.AttributeBased.Helper`\r\n\r\n* DO NOT FORGET to run the main server in the beginning, otherwise it will not work.\r\n\r\n* The following video demonstrates the way of how you run AbC programs. \r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/AttributeBased)            \r\n[Video Demo](https://www.youtube.com/watch?v=QfbCYoRgE3s&feature=youtu.be)\r\n\r\n### Modelling Group-based Interaction\r\nIn this section, we show how to model group-based framework in AbC in an easy way. We consider a scenario where we have three groups: groupA, groupB, and groupC. We defines two members of groupB, one member of groupA, and one member of groupC. The groupC member stays for a certain amount of time in groupC and then leaves to join groupB. The groupB members are always ready to receive messages from groupA members. On the other hand, groupA members are always sending messages only to groupB. The figure below shows the conceptual scenario.   \r\n\r\n![](https://dl.dropboxusercontent.com/s/hrlfdvqs27f8kl5/group.png?dl=0)\r\n\r\nThe groupA behaviour is shown below. Basically, GroupA members always send messages with the predicate \"TOgrpB\". This predicate filters the message only to GroupB. In the same time, groupA members attach their group name in the message. \r\n`this.getComponent().getStore().getValue(\"group\")` this corresponds the the AbC attribute reference \"this.group\".\r\n\r\n<pre><code>\r\npublic class GroupA {\r\n\tpublic static GroupPredicate TOgrpB = new HasValue(\"group\", \"B\");\r\n\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\t// TODO Auto-generated method stub\r\n\t\t\twhile(true){\r\n\t\t\tSend(TOgrpB, \"MSG\" + \",\" + this.getComponent().getStore().getValue(\"group\"), null);\r\n\t\t\tThread.sleep(2000);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nOn the other hand, the behaviour of groupB and groupC members is nearly similar in the sense that both of them are waiting to receive messages from groupA as shown below.\r\n\r\n<pre><code>\r\npublic class GroupB {\r\n\tpublic static GroupPredicate FromgrpA = new HasValue(\"$1\", \"A\");\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\twhile(true){\r\n\t\t\tSystem.out.println(this.name + \" => received: \" + receive(FromgrpA, null));\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nSo, both of groupB and groupC members have a process that is waiting to receive a message with a predicate \"FromgrpA\". This predicate inspects the second element of the received values and checks its equality with \"A\" where \"A\" denotes groupA. if this predicate holds true then the message can be received otherwise it will be discarded. In addition to this behaviour, the groupC members contain another process running in parallel with previous process (Remember: putting two processes in parallel is done using the method \"addProcess()\"). This process waits for a while and then leaves groupC to join groupB as shown below.\r\n\r\n<pre><code>\r\npublic static class Process_2 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_2(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\t// TODO Auto-generated method stub\r\n\t\t\tupdate.put(this.getComponent().getStore().getAttribute(\"group\"), \"B\");\r\n\t\t\tThread.sleep(20000);\r\n\t\t\tSend(ff, \" \", update);\r\n\t\t\tSystem.out.println(\"joined group B\");\r\n\t\t}\r\n\t}\r\n<code></pre>\r\n\r\nWe model the group name as an attribute and leaving/joining the group by an attribute update. The attribute update can be achieved by updating the attribute followed with a silent move (i.e., send on a false predicate ()@ff ). The object \"update\" is a hashmap that contains a set of possible updates, these are attached to a send action with a false predicate. This action is not observable and indicates a silent move. The above code corresponds to the AbC code `[this.group |-> B]()@ff`. \r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/GroupBased)      \r\n[Video Demo](https://www.youtube.com/watch?v=3xlWubbXjTM&feature=youtu.be)\r\n\r\n### Modelling Publish/Subscribe framework\r\nIn this section, we show how to model Topic-based publish/subscribe framework in AbC in a natural way. We consider a scenario where a publisher is sending messages tagged with two different topics: topic_1=movies and topic_2=news. There are three subscribers, one is subscribed to \"movies\", one to \"news\", and the last one is subscribed to songs as shown below:\r\n\r\n![](https://dl.dropboxusercontent.com/s/72r0wd6ot3ujeuh/pubsub.png?dl=0)\r\n\r\nObviously, only the subscribers with \"movies\" or \"news\" will get the message, the subscriber who is subscribed to \"songs\" will not receive the message. This scenario can be modelled in AbC in an obvious way in the sense that the publisher will send a message with true predicate (i.e., satisfied by all) and tag these messages with topics. The Publisher has two attributes named topic_1 and topic_2 respectively. The publisher code is shown below:\r\n\r\n<pre><code>\r\npublic class Publisher {\r\n\tpublic static GroupPredicate any = new AnyComponent();\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException\r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\t// TODO Auto-generated method stub\r\n\t\t\tSend(any, \"msg,\" + this.getComponent().getStore().getValue(\"topic_1\") + \",\" + this.getComponent().getStore().getValue(\"topic_2\"), null);\r\n\t\t}\r\n\t}\r\n<code></pre>\r\n\r\nSimply, the publisher attaches its attributes \"topic_1\" and \"topic_2\" into the message and sends it to all possible subscribers. Note that the following code corresponds to the AbC attribute reference \"this.topic_1\"\r\n\r\n`this.getComponent().getStore().getValue(\"topic_1\")`\r\n \r\nThe subscriber is responsible to check if the message matches its subscriptions or not. This can be done by using the predicate \"subscribe\" as shown below. This predicate will check if the attached topics (i.e., located at $1 and $2) matches the subscriber subscriptions or not. Again the line `this.getComponent().getStore().getValue(\"subscription\")` corresponds to the AbC attribute reference \"this.subscription\".\r\n\r\n<pre><code>\r\npublic class Subscriber_1 {\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t * @throws AbCAttributeTypeException \r\n\t\t */\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\t\t\t\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\tGroupPredicate subscribe = new Or(new HasValue(\"$1\", this.getComponent().getStore().getValue(\"subscription\")), new HasValue(\"$2\", this.getComponent().getStore().getValue(\"subscription\")));\r\n\t\t\tSystem.out.println(this.name + \" => received: \" + receive(subscribe, null));\r\n\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nThe full source code for the whole scenario can be found below.\r\n\r\n[Source Code]\r\n(https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/PublishSubscribe)                 \r\n[Video Demo](https://www.youtube.com/watch?v=Eiil8DkPoqM&feature=youtu.be)\r\n\r\n### Encoding Channel-based Interaction\r\nIn this example, we show how we can model channel-based communication in AbC smoothly and easily. In essence, we will show how to encode the basic constructs of the [Broadcast Pi-calculus](http://dl.acm.org/citation.cfm?id=662485) into AbC in a natural way. We will consider the send and receive actions and the underlying communication paradigm. The encoding of a broadcast Pi-calculus process P, is rendered as an AbC component with empty environment. The channel is encoded as a special value in the sent message. For instance, the broadcast action in the broadcast Pi-calculus is encoded as follows:\r\n\r\n<pre><code>\r\npublic class Sender {\r\n\tpublic static GroupPredicate any = new AnyComponent();\r\n\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t */\r\n\t\tpublic Process_1(String name) {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\t// TODO Auto-generated method stub\r\n\t\t\tSend(any, \"a,v\", null);\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nas you see, the send action is encoded as a send method in AbC, where the predicate any corresponds to a true predicate in AbC (i.e., satisfied by all). The sent values is a pair, the first element is the name of the channel and the second element is the actual communicated value. As shown below, the receiver decides whether to accept the message or not.  \r\n\r\n<pre><code>\r\npublic class Receiver_1 {\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\r\n\t\t/**\r\n\t\t * @param name\r\n\t\t */\r\n\t\tpublic Process_1(String name) {\r\n\t\t\tsuper(name);\r\n\t\t\t// TODO Auto-generated constructor stub\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\r\n\t\t\tGroupPredicate channel = new HasValue(\"$0\", \"a\");\r\n\t\t\tSystem.out.println(this.name + \" => received: \" + receive(channel, null));\r\n\r\n\t\t}\r\n\t}\r\n\r\n</code></pre>\r\n\r\nBasically, the receiver accept only the message that satisfies the predicate \"channel\". This predicate checks the first element (i.e., \"$0\") in the message and returns true if it is equal to \"a\" otherwise the message is discarded. As shown in the figure below, we model a scenario, where there are two receiver waiting to receive messages on channel \"a\" , one receiver is waiting to receive message on channel \"c\", and one sender that wants to send a message \"v\" on channel \"a\".\r\n\r\n![](https://dl.dropboxusercontent.com/s/v8w7a1umxjne2w1/channel.png?dl=0)\r\n\r\nOnly the receivers which are waiting to receive a message on channel \"a\" will receive the message, the other receiver will discard any sent message on a channel that is different from \"c\". The source code for all processes can be found below and we also include a video to show how to run these processes.\r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/broadcast)      \r\n[Video Demo](https://www.youtube.com/watch?v=VfFOpDV-JSw&feature=youtu.be)\r\n\r\n### Contributors to the Implementation\r\nYehia Abd Alrahman                                                                                                     \r\nyehia.abdalrahman@imtlucca.it                                                                                            \r\nIMT Lucca for Advanced Studies                                                                                         \r\n@lazkany\r\n\r\n\r\n***\r\n\r\n\r\nMichele Loreti                                                                                                              \r\nmichele.loreti@unifi.it                                                                                                   \r\nUniversit\u0012a degli Studi di Firenze                                                                                      \r\n@michele-loreti\r\n### Support or Contact\r\nHaving trouble with with installation or programming? Please contact either @lazkany or @michele-loreti","google":"UA-73372050-1","note":"Don't delete this file! It's used internally to help with page regeneration."}