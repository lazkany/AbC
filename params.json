{
  "name": "AbaCuS",
  "tagline": "A Run-time Environment for the AbC Calculus",
  "body": "### AbaCuS: A Run-time Environment of the AbC Calculus\r\nIn most distributed systems, named connections (i.e., channels) are used as means for programming interaction between communicating partners. These kinds of connections are low level and usually totally independent of the knowledge, the status, the capabilities, ..., in one word, of the attributes of the interacting partners. We have recently introduced a calculus, called [AbC](https://dl.dropboxusercontent.com/s/eikm8lldw00int9/AbCPaper.pdf?dl=0), in which interactions among agents are dynamically established by taking into account “connection” as determined by predicates over agent attributes. Here, we present AbaCuS, a Java run-time environment that has been developed to support modelling and programming of collective adaptive systems by relying on the communication primitives of the AbC calculus. Systems are described as sets of parallel components, each component is equipped with a set of attributes and communications among components take place in an implicit multicast fashion. By means of a number of examples, we also show how opportunistic behaviors, achieved by run-time attribute updates, can be exploited to express different communication and interaction patterns and to program challenging case studies.\r\n\r\n### Getting Started\r\nAbaCuS provides a Java API that allows programmers to use the linguistic primitives of the AbC calculus in Java programs. \r\nThe implementation of AbaCuS fully relies on the formal semantics of the AbC calculus. There is a one-to-one correspondence between the AbC primitives and the programming constructs in AbaCuS. This close correspondence enhances confidence on the behavior of AbaCuS programs once they have been analyzed via formal methods, which is possible by relying on the operational semantics of the AbC calculus.\r\n\r\nAbC's operational semantics abstracts from a specific communication infrastructure. An AbC model consists of a set of parallel components that cooperate in a highly dynamic environment where the underlying communication infrastructure can change dynamically. \r\nThe current implementation  AbaCuS is however a centralized one, in the sense that it relies on a message broker that mediates the interactions. In essence, the broker accepts messages from sending components, and delivers them to all registered components with the exception of the sending ones. This central component plays the role of a forwarder and does not contribute in any way to message filtering. The decision about accepting or ignoring a message is decreed when the message is delivered to the receiving components. \r\n\r\nWe would like to stress that, although the current AbaCuS implementation is centralized, components interact anonymously  and combine their behaviors to achieve the required goals. Components are unaware of the existence of each other, they only interact with the message broker.\r\nTo facilitate interoperability with other tools and programming frameworks, AbaCuS relies on JSON, a standard data exchange technology that simplifies the interactions between heterogenous network components and provides the basis for allowing AbaCuS programs to cooperate with external services or devices. \r\n\r\nTo do network programming with AbaCuS you always have to start a forwarding server/message broker so that your program functions in the expected way. This task is very easy, all you need to do is to create an instance of the class \"AbCServer\". This class is responsible for forwarding messages. By default, It accepts messages at port number 9998 and it accepts registration at port number 9999. In the code snippet below we show how to instantiate this class and the required classes to be imported.   \r\n\r\n<pre><code>\r\nimport java.io.IOException;\r\nimport org.sysma.abc.core.exceptions.DuplicateNameException;\r\nimport org.sysma.abc.core.topology.AbCServer;\r\npublic class MainServer {\r\n\tpublic static void main(String[] args) throws IOException, DuplicateNameException {\r\n\t\tAbCServer srvr=new AbCServer();\r\n\t\tsrvr.start();\r\n\t}\r\n}\r\n</code></pre>\r\n\r\nIn this way, every AbC component should communicate only with the message broker/main server, this server is responsible for forwarding the messages to the other components. This means that every component should provide a mean of communication and in our implementation this can be done by instantiating the class \"AbCClient\" and specify the local address and the server address. Every node should also register itself to the message broker to be considered for future incoming messages. All addresses are socket addresses (i.e., IP address + port number). As mentioned above, the message broker with default settings accepts messages at port 9998 and registration at port 9999. In our tutorial here, we let the user to enter the port address at run time and because we run the examples on one machine, we consider the IP address as a wildcard as shown below.\r\n\r\n<pre><code>\r\n    System.out.println(\"Enter port number : \");\r\n\tint port = 0;\r\n\ttry {\r\n\t\tBufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tport = Integer.parseInt(bufferRead.readLine());\r\n\r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\tAbCClient cPortClient = new AbCClient(InetAddress.getLoopbackAddress(), port);\r\n\tcPortClient.RemoteRegister(InetAddress.getLoopbackAddress(), 9999);\r\n</code></pre>\r\n\r\nNow everything is in place to start programming with AbC linguistic primitives as we will see in the following examples. Now we list the basic steps to write an AbC program:\r\n\r\n* Create a Java class with a main method.\r\n* Create a Java class for each process type in your model (This class should extend the AbCProcess class and override the doRun() method). The doRun() method should contain the behaviour of your process.\r\n* In the main method, instantiate your processes, instantiate the classes AbCEnvironment, Attribute, and AbCComponent, assign attributes to the environment, the environment to the component, and processes to the component. Notice that the method addProcess() puts processes in parallel. For instant, if you have component C1, and then you add processes P1 and P2 to component C1, this is equivalent of having P1 and P2 in parallel within component C1.\r\n* Add a client port to your component (C1.setPort(cPortClient)).\r\n* Start the execution of your component with Start() method.\r\n* This is it!\r\n\r\n### Attribute-based Interaction\r\nNow we show the basic idea of attribute-based communication through a swarm robot scenario. We have four kinds of robots: Explorer, Helper, Rescuer, and Charger. The explorer robot is searching for victims in a disaster arena; the helper robot is helping other rescuers to rescue a victim; the rescuer robot already found the victim and waits until sufficient number of robots arrives to start rescuing; The charger robot is waiting for requests for charging from explorers. They all exchange information through the message broker as shown below.\r\n\r\n  ![](https://dl.dropboxusercontent.com/s/e1w8f2qxge2m3rt/attribute.png?dl=0) \r\n\r\nThe behaviour of the explorer robot is simple, it sends queries for information about victims to nearby rescuers or helpers. It sends its Id, a qry request, and its role. In our implementation values are sent as a tuple of elements. The predicate should be as follows: \r\n\r\n`GroupPredicate orPrd = new Or(new HasValue(\"role\", \"rescuer\"), new HasValue(\"role\", \"helper\"));`\r\n\r\nWe provide a set of predicates to be used to filter messages and you can find them here [AbC Predicates](https://github.com/lazkany/AbC/tree/master/bundles/org.sysma.abc.core/src/org/sysma/abc/core/predicates). If we take the predicate HasValue(\"role\", \"rescuer\") for example,this corresponds to the AbC predicate (role=rescuer) where the left hand side denotes an attribute identifier and the right hand side corresponds to a value. The behaviour of the explorer robot is shown bellow.\r\n\r\n<pre><code>\r\npublic class Explorer {\r\n\tpublic static AbCPredicate orPrd = new Or(new HasValue(\"role\", \"rescuer\"), new HasValue(\"role\", \"helper\"));\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t}\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\tsend(orPrd, new Tuple(this.getComponent().getStore().getValue(\"id\"), \"qry\",\r\n\t\t\t\t\tthis.getComponent().getStore().getValue(\"role\")));\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nThe Send method takes two parameters (predicate,values), the filter predicate and the tuple of values. Below you see the the definitions in the main method. \r\n\r\n<pre><code>\r\n    AbCClient cPortClient = new AbCClient(InetAddress.getLoopbackAddress(), port);\r\n\t\tcPortClient.register(InetAddress.getLoopbackAddress(), 9999);\r\n\t\tProcess_1 explorer = new Process_1(\"explorer_1\");\r\n\t\tAbCEnvironment store1 = new AbCEnvironment();\r\n\t\tAttribute<Object> a1 = new Attribute<Object>(\"role\", Object.class);\r\n\t\tAttribute<Object> a2 = new Attribute<Object>(\"id\", Object.class);\r\n\t\tstore1.setValue(a1, \"explorer\");\r\n\t\tstore1.setValue(a2, \"1\");\r\n\t\tAbCComponent c1 = new AbCComponent(\"C1\", store1);\r\n\t\tc1.addProcess(explorer);\r\n\t\tc1.setPort(cPortClient);\r\n\t\tcPortClient.start();\r\n\t\tc1.start();\r\n</code></pre>\r\n\r\n\r\nAs we mentioned in the previous section, here we define the component, its environment, and its attributes. we attach the process we defined to the component and start its execution. \r\n\r\nThe behaviour of processes (i.e., Helper, Rescuer, and Charger) is specified in the same way. The only differences are those regarding their attributes, attribute values and their predicate. They also use the other construct for communication which is the receive method. The receive method passes the received message to a function (msg->Function(msg)), This function checks if the received message satisfies the receiving predicate.\r\n\r\nBelow we only show the behaviour of the Helper robot. Processes Rescuer and charger follow in a similar way. The source code for the whole example can be found be the end of this section and we also include a video to show how to run AbC programs.\r\n\r\n<pre><code>\r\npublic class Helper {\r\n\tpublic class Helper {\r\n\r\n\tpublic static class Process_1 extends AbCProcess {\r\n\t\tpublic Process_1(String name) throws AbCAttributeTypeException {\r\n\t\t\tsuper(name);\r\n\t\t}\r\n\t\t@Override\r\n\t\tprotected void doRun() throws InterruptedException, AbCAttributeTypeException {\r\n\t\t\tSystem.out.println(this.name + \" => received: \" + receive(o -> andPrd(o)));\r\n\t\t}\r\n\t\tpublic AbCPredicate andPrd(Object msg) {\r\n\t\t\tif (msg instanceof Tuple) {\r\n\t\t\t\tTuple t = (Tuple) msg;\r\n\t\t\t\tif (t.get(1).equals(\"qry\") && t.get(2).equals(\"explorer\")) {\r\n\t\t\t\t\treturn new TruePredicate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new FalsePredicate();\r\n\t\t}\r\n\t}\r\n</code></pre>\r\n\r\nPutting it all together \r\n\r\n* To run your AbC program, you'll need AbC .JAR and its dependencies (i.e.,[gson-2.5.jar](http://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.5%7Cjar)) placed in the same folder. \r\n\r\n* To create AbC .JAR, after you complete writing your AbC program, select the main directory in the project explorer in your eclipse (org.sysma.abc.core). From file menu, select \"Export\". the Select JAR File from JAVA folder and finally save it in the same folder of \"gson-2.5.jar\".\r\n\r\n* Assume that you saved the AbC .JAR with \"test.jar\" name, so in the terminal you write the following to run for instance the code of the Helper robot. The AbC .JAR file for the examples in this tutorial can be found in [test.jar](https://www.dropbox.com/s/w1nqfasckxi1x4j/test.jar?dl=0)\r\n\r\n`java -cp test.jar:gson-2.5.jar org.sysma.abc.core.ex.AttributeBased.Helper`\r\n\r\n* DO NOT FORGET to run the main server in the beginning, otherwise it will not work.\r\n\r\n* The following video demonstrates the way of how you run AbC programs. \r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/bundles/org.sysma.abc.examples/src/org/sysma/abc/core/ex/AttributeBased)            \r\n[Video Demo](https://www.youtube.com/watch?v=QfbCYoRgE3s&feature=youtu.be)\r\n### The Stable Marriage problem in AbaCuS\r\nWe consider the classical stable marriage problem (SMP), a problem of finding a stable matching between two equally sized sets of elements given an ordering of preferences for each element. \r\n\r\nIn our example, we consider $n$ men and $n$ women, where each person has ranked all members of the opposite sex in order of preferences, we have to engage the men and women together such that there are no two people of opposite sex who would both rather have each other than their current partners. When there are no such pairs of people, the set of marriages is deemed stable. For convenience we assume there are no ties; thus, if a person is indifferent between two or more possible partners he/she is nevertheless required to rank them in some order. \r\nIn our implementation we assume that the man initiates the interaction. This is done by removing his first best from his list of preferences and assuming it to be his partner. The man proposes to this possible partner and waits for any invalidation messages from this woman. If this message is received, the man starts over again and removes the next item from his preferences and soon. The behaviour of a man can be implemented in AbaCuS as follows:\r\n<pre><code>\r\npublic class ManAgent extends AbCProcess {\r\n\tpublic LinkedList<Integer> preferences;\t\r\n\tpublic ManAgent( LinkedList<Integer> preferences ) {\r\n\t\tsuper(\"ManAgent\");\r\n\t\tthis.preferences = preferences;\r\n\t}\t\r\n\t@Override\r\n\tprotected void doRun() throws Exception {\r\n\t\tSystem.out.println(\"Man started...\");\r\n\t\twhile ( !preferences.isEmpty() ) {\r\n\t\t\tInteger partner = preferences.poll();\r\n\t\t\tSystem.out.println(getValue(Environment.idAttribute)+\"> Selected partner: \"+partner);\r\n\t\t\tsetValue(Environment.partnerAttribute, partner);\r\n\t\t\tSystem.out.println(getValue(Environment.idAttribute)+\"> Sendig request to \"+partner);\r\n\t\t\tsend( new HasValue(\"ID\", partner) , new Tuple( \"PROPOSE\" , getValue(Environment.idAttribute)) );\r\n\t\t\treceive(o -> isAnInvalidatingMessage(o) );\r\n\t\t\tSystem.out.println(getValue(Environment.idAttribute)+\"> Matching changed!\");\r\n\t\t}\r\n\t\tSystem.out.println(getValue(Environment.idAttribute)+\"> I am alone...\");\r\n\t}\r\n\tpublic AbCPredicate isAnInvalidatingMessage( Object msg ) {\r\n\t\tif (msg instanceof Tuple) {\r\n\t\t\tTuple t = (Tuple) msg;\r\n\t\t\tif ((t.size() == 1)&&(t.get(0).equals(\"INVALID\"))) {\r\n\t\t\t\treturn new TruePredicate();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new FalsePredicate();\r\n\t}\r\n}\r\n</pre></code>\r\n\r\nOn the other hand, a woman waits for proposals all the time. In the beginning, when she is not engaged, she accepts any proposal. Once she is engaged and another man proposes, she looks at her list of preferences and compare her current man with the new man and decides if she will be better off with the new man or not. If yes, she says sorry to her current man and get engaged to the new one, otherwise she just says sorry to the new proposed man. \r\nThe full implementation can be found below.\r\n\r\n### Modelling Channel-based Interaction\r\n",
  "google": "UA-73372050-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}