{"name":"AbC","tagline":"The Implementation of AbC Linguistic Primitives ","body":"### Attribute-based Communication.\r\nAbC is a process calculus for attribute-based communication. An AbC system consists of a set of parallel agents each of which is equipped with a set of attributes. Communication takes place in an implicit multicast fashion, and interactions among agents are dynamically established by taking into account \"connections\" as determined by predicates over the attributes of agents.\r\n\r\nIn this page, we present a prototype implementation for AbC linguistic primitives and show how one can exploit these flexible primitives to model different communication models and interaction patterns. In the following sections, we show how to program with AbC primitives naturally and easily. \r\n\r\n\r\n### Getting Started\r\nIn this implementation we consider a message broker. In essence, it accepts messages from sending components, and delivers them to all registered components except for the sending one. This message broker has the exact role of a forwarder and it does not contribute anything to message filtering. Deciding to accept a message or not is carried out when the message is delivered to the component. This implies that you always have to start the forwarding server/message broker so that your program functions in the expected way. This task is very easy, all you need to do is to create an instance of the class \"ServerPort\". This class is responsible for forwarding messages. By default, It accepts messages at port number 9998 and it accepts registration at port number 9999. In the code snippet below we show how to instantiate this class and the required classes to be imported.\r\n\r\n    \r\n![](https://dl.dropboxusercontent.com/s/rvylqyja3pswxrx/serverport.png?dl=0)\r\n\r\nIn this way, every AbC component should communicate only with the message broker/main server, this server is responsible for forwarding the messages to the other components. This means that every component should provide a mean of communication and in our implementation this can be done by instantiating the class \"ServerPortClient\" and specify the local address and the server address. Every node should also register itself to the message broker to be considered for future incoming messages. All addresses are socket addresses (i.e., IP address + port number). As mentioned above, the message broker with default settings accepts messages at port 9998 and registration at port 9999. In our tutorial here, we let the user to enter the port address at run time and because we run the examples on one machine, we consider the IP address as a wildcard as shown below.\r\n\r\n![](https://dl.dropboxusercontent.com/s/ex8iz8fcslqwp3u/serverportclient.png?dl=0)\r\n\r\nNow everything is in place to start programming with AbC linguistic primitives as we will see in the following examples. Now we list the basic steps to write an AbC program:\r\n\r\n* Create a Java class with a main method.\r\n* Create a Java class for each process type in your model (This class should extend the AbCProcess class and override doRun() method). The doRun() should contain the behaviour of your process.\r\n* In the main method, instantiate your processes, instantiate the classes AbCEnvironment, Attribute, and AbCComponent, assign attributes to the environment, the environment to the component, and processes to the component. Notice that the method addProcess() put processes in parallel. For instant, if you have component C1, and then you add processes P1 and P2 to component C1, this is equivalent of having P1 and P2 in parallel within component C1.\r\n* Add a client port to your component (C1.addPort(cPortClient)).\r\n* Start the execution of your component with Start() method.\r\n* This is it!\r\n\r\n### Attribute-based Interaction\r\nIn this page, we present a prototype implementation for AbC linguistic primitives and show how one can exploit these flexible primitives to model different communication models and interaction patterns. In the following sections, we show how to program with AbC primitives naturally and easily.\r\n  ![](https://dl.dropboxusercontent.com/s/e1w8f2qxge2m3rt/attribute.png?dl=0) \r\n\r\n\r\nIn this page, we present a prototype implementation for AbC linguistic primitives and show how one can exploit these flexible primitives to model different communication models and interaction patterns. In the following sections, we show how to program with AbC primitives naturally and easily.\r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/AttributeBased)            \r\n[Video Demo](https://www.youtube.com/watch?v=QfbCYoRgE3s&feature=youtu.be)\r\n### Encoding Channel-based Interaction\r\n![](https://dl.dropboxusercontent.com/s/v8w7a1umxjne2w1/channel.png?dl=0)\r\n\r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/broadcast)      \r\n[Video Demo](https://www.youtube.com/watch?v=VfFOpDV-JSw&feature=youtu.be)\r\n### Modelling Publish/Subscribe framework\r\n![](https://dl.dropboxusercontent.com/s/72r0wd6ot3ujeuh/pubsub.png?dl=0)\r\n[Source Code]\r\n(https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/PublishSubscribe)                 \r\n[Video Demo](https://www.youtube.com/watch?v=Eiil8DkPoqM&feature=youtu.be)\r\n### Modelling Group-based Interaction   \r\n![](https://dl.dropboxusercontent.com/s/hrlfdvqs27f8kl5/group.png?dl=0)\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/GroupBased)      \r\n[Video Demo](https://www.youtube.com/watch?v=3xlWubbXjTM&feature=youtu.be)\r\n### Contributors to the Implementation\r\nYehia Abd Alrahman                                                                                                     \r\nyehia.abdalrahman@imtlucca.it                                                                                            \r\nIMT Lucca for Advanced Studies                                                                                         \r\n@lazkany\r\n\r\n\r\n***\r\n\r\n\r\nMichele Loreti                                                                                                              \r\nmichele.loreti@unifi.it                                                                                                   \r\nUniversit\u0012a degli Studi di Firenze                                                                                      \r\n@michele-loreti\r\n### Support or Contact\r\nHaving trouble with with installation or programming? Please contact either @lazkany or @michele-loreti","google":"UA-73372050-1","note":"Don't delete this file! It's used internally to help with page regeneration."}