{"name":"AbC","tagline":"The Implementation of AbC Linguistic Primitives ","body":"### Attribute-based Communication.\r\nAbC is a process calculus for attribute-based communication. An AbC system consists of a set of parallel agents each of which is equipped with a set of attributes. Communication takes place in an implicit multicast fashion, and interactions among agents are dynamically established by taking into account \"connections\" as determined by predicates over the attributes of agents.\r\n\r\nIn this page, we present a prototype implementation for AbC linguistic primitives and show how one can exploit these flexible primitives to model different communication models and interaction patterns. \r\n\r\n\r\n### Getting Started\r\nIn this implementation we consider a message broker. In essence, it accepts messages from sending components, and delivers them to all registered components except for the sending one. This message broker has the exact role of a forwarder and it does not contribute anything to message filtering. Deciding to accept a message or not is carried out when the message is delivered to the component. This implies that you always have to start the forwarding server/message broker so that your program functions in the expected way. This task is very easy, all you need to do is to create an instance of the class \"ServerPort\". This class is responsible for forwarding messages. By default, It accepts messages at port number 9998 and it accepts registration at port number 9999. In the code snippet below we show how to instantiate this class and the required classes to be imported.\r\n\r\n    \r\n![](https://dl.dropboxusercontent.com/s/rvylqyja3pswxrx/serverport.png?dl=0)\r\n\r\nIn this way, every AbC component should communicate only with the message broker/main server, this server is responsible for forwarding the messages to the other components. This means that every component should provide a mean of communication and in our implementation this can be done by instantiating the class \"ServerPortClient\" and specify the local address and the server address. Every node should also register itself to the message broker to be considered for future incoming messages. All addresses are socket addresses (i.e., IP address + port number). As mentioned above, the message broker with default settings accepts messages at port 9998 and registration at port 9999. In our tutorial here, we let the user to enter the port address at run time and because we run the examples on one machine, we consider the IP address as a wildcard as shown below.\r\n\r\n![](https://dl.dropboxusercontent.com/s/ex8iz8fcslqwp3u/serverportclient.png?dl=0)\r\n\r\nNow everything is in place to start programming with AbC linguistic primitives as we will see in the following examples. Now we list the basic steps to write an AbC program:\r\n\r\n* Create a Java class with a main method.\r\n* Create a Java class for each process type in your model (This class should extend the AbCProcess class and override the doRun() method). The doRun() method should contain the behaviour of your process.\r\n* In the main method, instantiate your processes, instantiate the classes AbCEnvironment, Attribute, and AbCComponent, assign attributes to the environment, the environment to the component, and processes to the component. Notice that the method addProcess() puts processes in parallel. For instant, if you have component C1, and then you add processes P1 and P2 to component C1, this is equivalent of having P1 and P2 in parallel within component C1.\r\n* Add a client port to your component (C1.addPort(cPortClient)).\r\n* Start the execution of your component with Start() method.\r\n* This is it!\r\n\r\n### Attribute-based Interaction\r\nNow we show the basic idea of attribute-based communication through a swarm robot scenario. We have four kinds of robots: Explorer, Helper, Rescuer, and Charger. The explorer robot is searching for victims in a disaster arena; the helper robot is helping other rescuers to rescue a victim; the rescuer robot already found the victim and waits until sufficient number of robots arrives to start rescuing; The charger robot is waiting for requests for charging from explorers. They all exchange information through the message broker as shown below.\r\n\r\n  ![](https://dl.dropboxusercontent.com/s/e1w8f2qxge2m3rt/attribute.png?dl=0) \r\n\r\nThe behaviour of the explorer robot is simple, it sends queries for information about victims to nearby rescuers or helpers. It sends its Id, a qry request, and its role. In our implementation values are sent as a sequence of strings separated with comma \",\". The predicate should be as follows: \r\n\r\nGroupPredicate orPrd = new Or(new HasValue(\"role\", \"rescuer\"), new HasValue(\"role\", \"helper\"));\r\n\r\nWe provide a set of predicates to be used to filter messages and you can find them here [AbC Predicates](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/grpPredicate). If we take the predicate HasValue(\"role\", \"rescuer\") for example,this corresponds to the AbC predicate (role=rescuer) where the left hand side denotes an attribute identifier and the right hand side corresponds to a value. The behaviour of the explorer robot is shown bellow.\r\n\r\n![](https://dl.dropboxusercontent.com/s/6n47ju8qckgh7im/explorer.png?dl=0)\r\n\r\nThe Send method takes three parameters (predicate,values,update), the filter predicate, the sequence of values as a string, and a possible set of local attribute updates. In this case we don't need the updates. Below you see the the definitions in the main method. \r\n\r\n![](https://dl.dropboxusercontent.com/s/6a1umd3m8utapnx/mainexplorer.png?dl=0)\r\n\r\nAs we mentioned in the previous section, here we define the component, its environment, and its attributes. we attach the process we defined to the component and start its execution. \r\n\r\nThe behaviour of processes (i.e., Helper, Rescuer, and Charger) is specified in the same way. The only differences are those regarding their attributes, attribute values and their predicate. They also use the other construct for communication which is the receive method. The receive method takes two parameters (predicate, update), the receiving predicate and a possible set of local attribute updates if there is any. It should be noted that the receiving predicate can either check local attributes or if the received values satisfy certain conditions. As we know, the receiving values are a sequence of strings concatenated with \",\". If you want to refer to a specific element in the received value, use the following notation for the left hand side of the predicate operand \"$index\". If you put a dollar sign before an integer number, this will be regarded as a bound name that refers to the value with index \"index\" in the received sequence of values. For instance if we take the receiving predicate for the Helper robot, it should be as follows: \r\n\r\nGroupPredicate andPrd = new And(new HasValue(\"$1\", \"qry\"), new HasValue(\"$2\", \"explorer\"));\r\n\r\nThis is an (and) predicate that checks if the second element of the received values equals to \"qry\" and the third element equals to \"explorer\". It corresponds to the AbC predicate (x=qry) && (y=explorer) where the received sequence of values is (v,x,y). Notice that the index starts from zero. Below we only show the behaviour of the Helper robot. Processes Rescuer and charger follow in a similar way. The source code for the whole example can be found be the end of this section and we also include a video to show how to run AbC programs.\r\n\r\nPutting it all together \r\n\r\n* To run your AbC program, you'll need AbC .JAR and its dependencies (i.e.,[gson-2.5.jar](http://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.5%7Cjar)) placed in the same folder. \r\n\r\n* To create AbC .JAR, after you complete writing your AbC program, select the main directory in the project explorer in your eclipse (org.sysma.abc.core). From file menu, select \"Export\". the Select JAR File from JAVA folder and finally save it in the same folder of \"son-2.5.jar\".\r\n\r\n* Assume that you saved the AbC .JAR with \"test.jar\" name, so in the terminal you write the following to run for instance the code of the Helper robot.\r\n\r\njava -cp test.jar:son-2.5.jar org.sysma.abc.core.Examples.AttributeBased.Helper\r\n\r\n* DO NOT FORGET to run the main server in the beginning, otherwise it will not work.\r\n\r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/AttributeBased)            \r\n[Video Demo](https://www.youtube.com/watch?v=QfbCYoRgE3s&feature=youtu.be)\r\n### Encoding Channel-based Interaction\r\n![](https://dl.dropboxusercontent.com/s/v8w7a1umxjne2w1/channel.png?dl=0)\r\n\r\n\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/broadcast)      \r\n[Video Demo](https://www.youtube.com/watch?v=VfFOpDV-JSw&feature=youtu.be)\r\n### Modelling Publish/Subscribe framework\r\n![](https://dl.dropboxusercontent.com/s/72r0wd6ot3ujeuh/pubsub.png?dl=0)\r\n[Source Code]\r\n(https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/PublishSubscribe)                 \r\n[Video Demo](https://www.youtube.com/watch?v=Eiil8DkPoqM&feature=youtu.be)\r\n### Modelling Group-based Interaction   \r\n![](https://dl.dropboxusercontent.com/s/hrlfdvqs27f8kl5/group.png?dl=0)\r\n[Source Code](https://github.com/lazkany/AbC/tree/master/org.sysma.abc.core/src/org/sysma/abc/core/Examples/GroupBased)      \r\n[Video Demo](https://www.youtube.com/watch?v=3xlWubbXjTM&feature=youtu.be)\r\n### Contributors to the Implementation\r\nYehia Abd Alrahman                                                                                                     \r\nyehia.abdalrahman@imtlucca.it                                                                                            \r\nIMT Lucca for Advanced Studies                                                                                         \r\n@lazkany\r\n\r\n\r\n***\r\n\r\n\r\nMichele Loreti                                                                                                              \r\nmichele.loreti@unifi.it                                                                                                   \r\nUniversit\u0012a degli Studi di Firenze                                                                                      \r\n@michele-loreti\r\n### Support or Contact\r\nHaving trouble with with installation or programming? Please contact either @lazkany or @michele-loreti","google":"UA-73372050-1","note":"Don't delete this file! It's used internally to help with page regeneration."}